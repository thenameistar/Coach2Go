@namespace Coach2Go.Pages.Onboarding
@using MudBlazor
@using Coach2Go.Shared.Dtos
@using Coach2Go.Shared

<MudPaper Class="onboarding-container">

    <div class="onboarding-header">
        <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="@Skip">Skip</MudButton>
    </div>

    <MudText Typo="Typo.h5" Class="onboarding-title">Where do you train?</MudText>

    <div class="onboarding-options">
        @foreach (var option in trainingLocations)
        {
            <MudButton Variant="Variant.Filled"
                       Color="@(selectedLocation == option ? Color.Secondary : Color.Primary)"
                       Class="onboarding-button"
                       OnClick="@(() => SelectLocation(option))">
                @option
            </MudButton>
        }
    </div>

    @if (selectedLocation == "Gym")
    {
        <MudSelect T="string" Label="Select a Gym" @bind-Value="selectedGym" Class="mt-4">
            @foreach (var gym in gymOptions)
            {
                <MudSelectItem Value="@gym">@gym</MudSelectItem>
            }
        </MudSelect>

        <MudButton OnClick="FetchEquipment" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2">
            Load Equipment
        </MudButton>

        @if (equipmentList?.Any() == true)
        {
            <MudPaper Class="pa-4 mt-2" Elevation="1">
                <MudGrid>
                    @foreach (var item in equipmentList)
                    {
                        <MudItem xs="12">
                            <MudGrid Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.body1">@item.EquipmentName</MudText>
                                <MudAvatar 
                                   Image="@($"/{(item.ImageUrl?.StartsWith("images/") == true ? item.ImageUrl : $"images/{item.ImageUrl ?? "default.jpg"}")}")"
                                   Size="Size.Large"
                                   Class="mud-avatar-square"
                                   Style="width: 60px; height: 60px;" />
                            </MudGrid>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        }
    }

    <MudText Typo="Typo.caption" Class="mt-2" Color="Color.Warning">
    Disclaimer: Coach2Go is not a medical tool. Always consult a healthcare professional before beginning any new fitness programme, especially if you have any medical conditions or injuries.
    </MudText>

    <MudText Typo="Typo.body2" Class="mt-4">
        Please review and agree to our 
        <MudLink Href="/privacy-policy" Target="_blank">Privacy Policy</MudLink> 
        before continuing.
    </MudText>

    <MudCheckBox T="bool"
            @bind-Checked="agreedToPolicy"
            Label="I agree to the Privacy Policy"
            Class="mt-2" />
    
    <div class="onboarding-footer">
        <MudButton Variant="Variant.Filled" 
               Color="Color.Primary" 
               OnClick="NextStep" >
            Next
        </MudButton>
    </div>

</MudPaper>

@code {
    
    [Parameter] public EventCallback OnNext { get; set; }


    [Inject] private OnboardingState OnboardingState { get; set; } = default!;
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private AuthService AuthService { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private string? selectedLocation;
    private readonly string[] trainingLocations = { "Home", "Gym", "Bodyweight" };

    private string? selectedGym;
    private bool agreedToPolicy = false;
    private List<string> gymOptions = new();
    private List<GymEquipmentDto> equipmentList = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allEquipment = await Http.GetFromJsonAsync<List<GymEquipmentDto>>("/api/gymequipment");
           gymOptions = allEquipment?
               .Select(e => e.GymName)
               .Where(name => name != null)
               .Select(name => name!)
               .Distinct()
               .OrderBy(name => name)
               .ToList() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(" Failed to fetch gym options: " + ex.Message);
        }
    }
    private async Task NextStep()
    {
        Console.WriteLine($"Selected location: {selectedLocation}");
        Console.WriteLine($"Selected gym: {selectedGym}");

       
        OnboardingState.Type = selectedLocation == "Gym" ? "Gym" : "Bodyweight";

        var request = new
        {
            Goal = OnboardingState.Goal,
            Type = OnboardingState.Type,
            Experience = OnboardingState.Experience
        };

        try
        {
            var response = await Http.PostAsJsonAsync("api/user/onboarding", request);
            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine(" Onboarding failed: " + await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error submitting onboarding: " + ex.Message);
        }

        await OnNext.InvokeAsync();
    }

    private void Skip()
    {
        Navigation.NavigateTo("/dashboard", true);
    }

    void SelectLocation(string location)
    {
        selectedLocation = location;
        equipmentList.Clear(); 
    }

    private async Task FetchEquipment()
    {
        if (!string.IsNullOrWhiteSpace(selectedGym))
        {
            equipmentList = await Http.GetFromJsonAsync<List<GymEquipmentDto>>($"/api/gymequipment/gym/{selectedGym}") ?? new();
        }
    }
}

<style scoped>
.onboarding-container {
    background-color: #000;
    color: white;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 2rem;
}

.onboarding-header,
.onboarding-footer {
    display: flex;
    justify-content: flex-end;
}

.onboarding-title {
    text-align: center;
    margin-bottom: 1rem;
}

.onboarding-options {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
}

.onboarding-button {
    width: 80%;
    max-width: 300px;
    border-radius: 25px;
}
</style>

