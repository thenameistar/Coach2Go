@page "/register"
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthService AuthService

@using Coach2Go.Shared.Dtos
@using System.Net.Http.Json
@using System.Net.Http.Headers

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex flex-column justify-center align-center" Style="height: 100vh;">

    <MudImage Src="images/logo.png" Alt="Coach2Go Logo" Width="120" Class="mb-6" />

    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-2" Style="color: white;">
        Create your account
    </MudText>
    <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4" Style="color: lightgray;">
        Start your fitness journey with us.
    </MudText>

    <MudTextField Label="Username" Variant="Variant.Outlined" @bind-Value="username" Class="mb-2" />
    <MudTextField Label="Email" Variant="Variant.Outlined" @bind-Value="email" Class="mb-2" />
    <MudTextField Label="Password" Variant="Variant.Outlined" @bind-Value="password" InputType="InputType.Password" Class="mb-4" />

    <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="HandleRegister">
        REGISTER
    </MudButton>

    <MudText Typo="Typo.caption" Class="mt-2" Align="Align.Center" Style="color: red;">
        @errorMessage
    </MudText>

    <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-4" Style="color: gray;">
        Already have an account? 
        <MudLink Href="/login">Login</MudLink>
    </MudText>

</MudContainer>

@code {
    private string username = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        errorMessage = string.Empty;
        
        var goal = await localStorage.GetItemAsync<string>("onboarding_goal");
        var type = await localStorage.GetItemAsync<string>("onboarding_type");
        var experience = await localStorage.GetItemAsync<string>("onboarding_experience");
            
        var registerData = new RegisterRequest
        {
            Username = username,
            Email = email,
            Password = password,
            Goal = goal ?? "",
            Type = type ?? "",
            Experience = experience ?? ""
        };
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/register", registerData);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResult>();

                if (result is not null)
                {
                    await localStorage.SetItemAsync("authToken", result.Token);
                    await localStorage.SetItemAsync("currentUser", result.User);
                    Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", result.Token);

                    await AuthService.SetAuthToken(result.Token, result.User);

                    NavigationManager.NavigateTo("/onboarding");
                }
                else
                {
                    errorMessage = "Registration succeeded but response was empty.";
                }
            }
            else
            {
                var serverMessage = await response.Content.ReadAsStringAsync();
                errorMessage = $"Register failed: {serverMessage}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class RegisterRequest
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        
        public string Goal { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Experience { get; set; } = string.Empty;
    }

    public class LoginResult
    {
        public string Token { get; set; } = string.Empty;
        public UserDto User { get; set; } = new();
    }
}