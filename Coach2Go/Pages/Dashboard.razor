@page "/dashboard"
@using MudBlazor
@using Coach2Go.Shared.Dtos
@inject AuthService AuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0 ma-0">

    <!-- Welcome message -->
    <MudText Typo="Typo.h4" Class="mb-1" Style="color: white;">Hi @username, ready to train?</MudText>
    <MudText Typo="Typo.subtitle2" Class="mb-4" Style="font-style:italic; color: white;">
        You don’t need to feel ready, you just need to begin.
    </MudText>

    <!-- Activity and Plan buttons -->
    <MudStack Row Justify="Justify.SpaceAround" Spacing="2" Class="px-4 pt-4">
        <MudButton 
            Variant="@(NavigationManager.Uri.Contains("/dashboard") ? Variant.Filled : Variant.Outlined)"
            Color="Color.Primary"
            @onclick="@(() => NavigationManager.NavigateTo("/dashboard"))"
            Class="rounded-lg px-4"
            Style="min-width: 100px;">
            Activity
        </MudButton>
        
        <MudButton 
            Variant="@(NavigationManager.Uri.Contains("/plan") ? Variant.Filled : Variant.Outlined)"
            Color="Color.Primary"
            @onclick="@(() => NavigationManager.NavigateTo($"/plan/{AuthService.CurrentUser?.WorkoutPlanId}"))"
            Class="rounded-lg px-4"
            Style="min-width: 100px;">
            Plan
        </MudButton>
    </MudStack>
    
    <!-- Warm-Up Section -->

    <MudPaper Class="pa-4 mt-4" Elevation="4" Style="background-color: #000000;">
       <MudText Typo="Typo.h6">Quick Warm-Up</MudText>
       <MudImage Src="images/warmup.jpg" Alt="Warm-Up" Style="width: 100%; aspect-ratio: 16 / 9; background-color: #ccc; border-radius: 8px;"/>
       <MudText Typo="Typo.body2">2-minute warmup before your main workout</MudText>

        @if (!WarmupCompleted)
        {
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/warmup"))">
               Start Warm-Up
            </MudButton>
        }
        else
        {
            <MudText Typo="Typo.body2" Class="text-success">✅ Warm-up complete</MudText>
        }
    </MudPaper>
    
    <MudDivider Class="my-4" />
    <MudText Typo="Typo.h6" Class="px-4">Today’s Workout</MudText>
    <MudPaper>...</MudPaper>
    
    <MudPaper>
        <!-- Daily Workout Section -->
        <MudPaper Class="daily-workout-card" Elevation="2" @onclick="@(() => NavigationManager.NavigateTo("/dailyworkout"))" Style="cursor: pointer;">
            <MudImage Src="@(dailyImage ?? "images/default.jpg")" Alt="Workout image" Class="workout-img" />
        </MudPaper>
        
        <MudText Typo="Typo.subtitle1" Class="text-white mt-2 px-4">
            @dailyTitle
        </MudText>

    </MudPaper>
    


    <!-- Scrollable Today’s Goals widgets -->
    <MudText Typo="Typo.h6" Class="mb-2 px-4" Style="color: white;">Today’s Goals</MudText>
    <div class="scroll-wrapper">
        <div class="goal-scroll-container">

            <MudPaper Class="goal-card">
                <MudText Typo="Typo.subtitle1">Write your 3 goals</MudText>
                @for (int i = 0; i < dailyGoals.Count; i++)
                {
                    <MudTextField T="string"
                        Value="@dailyGoals[i]"
                        ValueChanged="@(value => OnGoalChanged(i, value))"
                        Label=@($"Goal {i + 1}") 
                        Variant="Variant.Outlined" />
                }
            </MudPaper>

            <MudPaper Class="goal-card">
                <MudText Typo="Typo.subtitle1">Water Intake Tracker</MudText>
                <MudIcon Icon="@Icons.Material.Filled.Opacity" Class="my-2" />
                <MudButtonGroup Color="Color.Secondary">
                    <MudButton>250ml</MudButton>
                    <MudButton>500ml</MudButton>
                    <MudButton>1L</MudButton>
                </MudButtonGroup>
            </MudPaper>

            <MudPaper Class="goal-card">
                <MudText Typo="Typo.subtitle1">Step Tracker</MudText>
                <MudText Typo="Typo.body2">Target: 10,000 steps</MudText>
                <MudText Typo="Typo.h6">6,330 steps</MudText>
                <MudProgressLinear Value="63" Color="Color.Primary" Class="mt-2" />
            </MudPaper>

            <MudPaper Class="goal-card">
                <MudText Typo="Typo.subtitle1">How do you feel today?</MudText>
                <MudText Typo="Typo.caption">(Tap the emoji that fits)</MudText>
                <MudStack Row Class="mt-2">
                    @foreach (var mood in moods)
                    {
                        <MudButton Variant="Variant.Text" OnClick="() => selectedMood = mood">@mood</MudButton>
                    }
                </MudStack>
            </MudPaper>

            <MudPaper Class="goal-card">
                <MudText Typo="Typo.subtitle1">Daily Note</MudText>
                <MudTextField T="string" Label="What's on your mind?" Variant="Variant.Outlined" @bind-Value="diaryNote" Lines="3" />
            </MudPaper>
            
            <MudPaper Class="goal-card d-flex align-center justify-center">
                <MudStack AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5">+</MudText>
                    <MudText Typo="Typo.caption">Add Widget</MudText>
                </MudStack>
            </MudPaper>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2 mx-4" OnClick="SaveDiaryEntryAsync">
            Save Diary
            </MudButton>

        </div>
    </div>

    <MudText Typo="Typo.h6" Class="px-4 mt-4 mb-1" Style="color: white;">My challenge</MudText>
    <MudPaper Class="streak-widget mx-4 mb-6">
      <MudText Typo="Typo.subtitle2" Class="mb-2" Style="color: white;">7 Day Milestone</MudText>
      <MudProgressLinear Value="@streakProgress" Color="Color.Primary" Class="streak-bar" Style="height: 14px;" Rounded />
    </MudPaper>

    <MudText Typo="Typo.h6" Class="px-4 mt-4 mb-2" Style="color: white;">Active Recovery</MudText>
    <MudPaper Class="recovery-card mx-4 mb-6" @onclick="@(() => NavigationManager.NavigateTo("/workout"))" Style="cursor: pointer;">
        <MudImage Src="images/activerecovery1.jpg" Alt="Active Recovery" Class="recovery-img" />
    </MudPaper>

</MudContainer>

@code {

    private string username { get; set; } = "User";
    private string _goal1 = string.Empty;
    private string? dailyImage;
    private string? dailyTitle;
    private int streakProgress = 0; 
    private List<string> dailyGoals = new() { "", "", "" };
    private string diaryNote = string.Empty;
    private string selectedMood = "";
    private string[] moods = new[] { "😩", "😥", "😐", "🙂", "😊" };
    private bool WarmupCompleted = false;

    private async Task StartWarmup()
    {
        WarmupCompleted = true;
        await Task.Delay(2000); 
    }
    private void OnGoalChanged(int index, string? value)
    {
        if (index >= 0 && index < dailyGoals.Count)
        {
            dailyGoals[index] = value ?? "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await AuthService.CheckAuthentication();
        username = AuthService.CurrentUser?.Username ?? "User";
        var userId = AuthService.CurrentUser?.Id ?? 0;

        try
        {
            var plan = await Http.GetFromJsonAsync<WorkoutPlanDto>($"api/workout/daily/{userId}");
            var today = DateTime.Today.DayOfWeek.ToString();
            var session = plan?.Sessions?
                .FirstOrDefault(s => s.Day.Equals(today, StringComparison.OrdinalIgnoreCase))
                ?? plan?.Sessions?.FirstOrDefault();

            dailyImage = session?.ImagePath;
            dailyTitle = session?.Title;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading daily workout for dashboard: " + ex.Message);
        }

        try
        {
            var entry = await Http.GetFromJsonAsync<DiaryEntryDto>($"/api/diary/today/{userId}") ?? new();
            if (entry.Goals != null)
            {
                for (int i = 0; i < entry.Goals.Count && i < 3; i++)
                {
                    dailyGoals[i] = entry.Goals[i];
                }
            }

            diaryNote = entry.Note ?? string.Empty;
            selectedMood = entry.Mood ?? string.Empty;
            streakProgress = entry.StreakPercent;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading diary entry: " + ex.Message);
        }
    }

    private async Task SaveDiaryEntryAsync()
    {
      
        while (dailyGoals.Count < 3)
            dailyGoals.Add("");

        var userId = AuthService.CurrentUser?.Id ?? 0;
        var entry = new DiaryEntryDto
        {
            UserId = userId,
            Date = DateTime.Today,
            Goals = dailyGoals,
            Note = diaryNote,
            Mood = selectedMood,
            StreakPercent = streakProgress
        };

        await Http.PostAsJsonAsync("/api/diary/today", entry);
    }

}

<style scoped>
.daily-workout-card {
    margin: 0 1rem 1.5rem 1rem;
    border-radius: 20px;
    overflow: hidden;
    transition: transform 0.2s ease;
}

.daily-workout-card:hover {
    transform: scale(1.02);
}

.workout-img {
    width: 100%;
    height: auto;
    object-fit: cover;
    display: block;
}

.scroll-wrapper {
    overflow-x: auto;
    padding: 0 1rem;
}

.goal-scroll-container {
    display: flex;
    flex-direction: row;
    gap: 1rem;
}

.goal-card {
    flex: 0 0 85%;
    background: linear-gradient(135deg, #c477ff, #d08eff);
    color: white;
    padding: 1rem;
    border-radius: 20px;
    min-width: 250px;
    max-width: 300px;
    transition: transform 0.2s ease-in-out;
}

.goal-card:hover {
    transform: scale(1.02);
}

.streak-widget {
    background: linear-gradient(135deg, #c477ff, #d08eff);
    border-radius: 20px;
    padding: 1rem;
    color: white;
}

.streak-bar {
    background-color: white; 
    --mud-palette-primary: black; 
}
.recovery-card {
    border-radius: 25px;
    overflow: hidden;
    padding: 0;
}

.recovery-img {
    width: 100%;
    height: auto;
    object-fit: cover;
    display: block;
}
</style>