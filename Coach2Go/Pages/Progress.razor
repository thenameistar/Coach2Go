@page "/progress"
@using Coach2Go.Shared.Dtos
@using MudBlazor
@inject HttpClient Http
@inject AuthService AuthService

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="pa-4">

    <!-- Header -->
    <MudStack AlignItems="AlignItems.Center" Spacing="2">
        <MudAvatar Size="Size.Medium" Icon="@Icons.Material.Filled.Person" />
        <MudText Typo="Typo.h5">My Progress</MudText>
    </MudStack>

    <!-- Weekly Workout Streak Card -->
    <MudPaper Class="mt-4 pa-4" Elevation="4" Style="background: linear-gradient(to right, #9b59b6, #8e44ad); color: white;">
        <MudText Typo="Typo.h6">Weekly Workout Streak</MudText>
        <MudText Typo="Typo.body2">Work out 3 times this week to hit your goal!</MudText>

        <MudProgressLinear Value="@WeeklyProgressPercent" Color="Color.Primary" Class="my-2" />
        <MudText Typo="Typo.caption">@($"{WeeklyCount} / 3 completed")</MudText>

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Style="color: white; border-color: white;">View History</MudButton>
    </MudPaper>

    <!-- Activity Chart -->
    <MudPaper Class="mt-4 pa-4" Elevation="4" Style="background: linear-gradient(to right, #d5a3f0, #e0c3fc);">
        <MudText Typo="Typo.h6">Activity</MudText>
        <MudText Typo="Typo.caption">@WeekRange</MudText>

        <MudChart ChartType="ChartType.Bar" Labels="@Labels" Datasets="@Datasets" />

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-2">View History</MudButton>
    </MudPaper>

    <!-- Workout History -->
    <MudPaper Class="mt-4 pa-4" Elevation="4">
        <MudText Typo="Typo.h6">My Workout History</MudText>

        <MudTable Items="@WorkoutHistory" Dense="true">
            <HeaderContent>
                <MudTh>Workout</MudTh>
                <MudTh>Sets</MudTh>
                <MudTh>Date</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.SessionTitle</MudTd>
                <MudTd>@context.Sets</MudTd>
                <MudTd>@context.Date</MudTd>
            </RowTemplate>
        </MudTable>

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-2">View Full History</MudButton>
    </MudPaper>

    <!-- Achievements Section -->
    <MudPaper Class="mt-4 pa-4" Elevation="4">
        <MudText Typo="Typo.h6">My Achievements</MudText>
        <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Size="Size.Large" Color="Color.Secondary" Class="mr-2" />
        <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" Color="Color.Secondary" Class="mr-2" />
        <MudIcon Icon="@Icons.Material.Filled.MilitaryTech" Size="Size.Large" Color="Color.Secondary" />

        <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-2">View All</MudButton>
    </MudPaper>

</MudContainer>

@code {
    private List<WorkoutProgressDto> WorkoutHistory = new();
    private int[] ChartData = new int[5];
    private string[] Labels = new[] { "Mon", "Tue", "Wed", "Thu", "Fri" };
    private ChartSeries[] Datasets = new ChartSeries[0];
    private int WeeklyCount = 0;
    private double WeeklyProgressPercent => WeeklyCount * 100.0 / 3;
    private string WeekRange = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userId = AuthService.CurrentUser?.Id ?? 0;
            if (userId == 0) return;

            WeeklyCount = (await Http.GetFromJsonAsync<int?>($"api/progress/weekly/{userId}")) ?? 0;
            ChartData = await Http.GetFromJsonAsync<int[]>($"api/progress/activity/{userId}") ?? Array.Empty<int>();
            WorkoutHistory = await Http.GetFromJsonAsync<List<WorkoutProgressDto>>($"api/progress/history/{userId}")
                             ?? new List<WorkoutProgressDto>();
            
            Datasets = new[] {
                new ChartSeries { Name = "Workouts", Data = ChartData.Select(c => (double)c).ToArray() }
            };

            var monday = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);
            var sunday = monday.AddDays(6);
            WeekRange = $"{monday:dd MMM} - {sunday:dd MMM}";
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine("❌ Failed to load progress data: " + ex.Message);
        }
    }
        
}