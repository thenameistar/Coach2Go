@page "/dailyworkout"
@using MudBlazor
@using Coach2Go.Shared.Dtos
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IDialogService DialogService
@using Coach2Go.Pages.Dialogs


<!-- Top bar -->
<MudPaper Class="top-bar" Elevation="0" Style="width: 100%; padding-top: 1rem;">
    <MudGrid Class="px-4" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <!-- Left Side: Back + Pause -->
        <MudItem xs="4" Class="d-flex align-items-center gap-2">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                           Color="Color.Primary"
                           Style="background: linear-gradient(to right, #a24bdc, #c994f8); border-radius: 50%; width: 48px; height: 48px;"
                           OnClick="NavigateBackToDashboard" />

            @if (isWorkoutStarted)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Pause"
                               Color="Color.Primary"
                               Style="background: linear-gradient(to right, #a24bdc, #c994f8); border-radius: 50%; width: 48px; height: 48px;"
                               OnClick="@PauseTimer" />
            }
        </MudItem>

        <!-- Center: Timer Text -->
        <MudItem xs="4" Class="d-flex justify-center">
            @if (isWorkoutStarted)
            {
                <MudText Typo="Typo.h5" Align="Align.Center" Class="text-white">
                    @($"{minutes:D2}:{seconds:D2}")
                </MudText>
            }
        </MudItem>

        <!-- Right Side: Timer Button + Bookmark Button -->
        <MudItem xs="4" Class="d-flex justify-end gap-2">
            <MudIconButton Icon="@Icons.Material.Filled.Timer"
                           Color="Color.Primary"
                           Style="background: linear-gradient(to right, #a24bdc, #c994f8); border-radius: 50%; width: 48px; height: 48px;"
                           OnClick="@ResetTimer" />

            <MudIconButton Icon="@Icons.Material.Filled.Bookmark"
                           Color="Color.Primary"
                           Style="background: linear-gradient(to right, #a24bdc, #c994f8); border-radius: 50%; width: 48px; height: 48px;" />
        </MudItem>
    </MudGrid>
</MudPaper>

<!-- Title and Image -->
<MudText Typo="Typo.h4" Align="Align.Center" Class="mt-2 mb-2">
    @(workoutPlan?.Sessions?.Count > 0 ? workoutPlan.Sessions[0].Title : "Loading...")
</MudText>
<MudImage Src="@(workoutPlan?.Sessions?.Count > 0 ? workoutPlan.Sessions[0].ImagePath : "images/workout1.jpg")" />

<!-- Workout Info -->
<MudPaper Class="info-box" Elevation="0">
    <MudGrid>
        <MudItem xs="6"><b>Target Muscles:</b></MudItem><MudItem xs="6">Chest, Glutes, Core</MudItem>
        <MudItem xs="6"><b>Level:</b></MudItem><MudItem xs="6">Beginner</MudItem>
        <MudItem xs="6"><b>Equipment:</b></MudItem><MudItem xs="6">Bodyweight</MudItem>
        <MudItem xs="6"><b>Duration:</b></MudItem><MudItem xs="6">30 min</MudItem>
    </MudGrid>
</MudPaper>

<!-- Exercises Section -->
@if (isLoading)
{
    <MudText Color="Color.Info" Align="Align.Center" Class="mt-4">
        Loading exercises...
    </MudText>
}
else if (exercises?.Length > 0 && exerciseCompleted?.Length == exercises.Length)
{
    @foreach (var (exercise, index) in exercises.Select((e, i) => (e, i)))
    {
        var completed = exerciseCompleted[index];

        <MudGrid Class="mt-2 px-4" AlignItems="AlignItems.Center">
            <MudItem xs="2">
                <MudPaper Class="icon-box">
                    <MudImage Src="@exercise.Icon" Alt="@exercise.Name" Width="32" />
                </MudPaper>
            </MudItem>

            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1" Class="text-white">@exercise.Name</MudText>
                <MudText Typo="Typo.caption" Class="text-white">@exercise.Details</MudText>
            </MudItem>

            @if (isWorkoutStarted)
            {
                <MudItem xs="2" Class="d-flex justify-end">
                    <MudCheckBox T="bool" Checked="@completed"
                                 @onchange="e => exerciseCompleted[index] = (bool?)e.Value ?? false"
                                 Color="Color.Primary" />
                </MudItem>
            }
        </MudGrid>
    }
}
else
{
    <MudText Color="Color.Warning" Align="Align.Center" Class="mt-4">
        No exercises found or something went wrong.
    </MudText>
}

<!-- Floating Start/End Button -->
<div style="position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%); z-index: 999;">
    @if (!isWorkoutStarted)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="rounded-full px-6 py-2" OnClick="@StartWorkout">
            Start Workout
        </MudButton>
    }
    else
    {
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" Class="rounded-full px-6 py-2" OnClick="@EndWorkout">
            End Workout
        </MudButton>
    }
</div>

@code {
    private WorkoutPlanDto? workoutPlan;
    private (string Icon, string Name, string Details)[] exercises = Array.Empty<(string, string, string)>();
    private bool[] exerciseCompleted = Array.Empty<bool>();
    private bool isWorkoutStarted = false;
    private bool isLoading = true;

    private int minutes = 0; 
    private int seconds = 0;
    private bool isRunning = false;
    private System.Timers.Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int userId = 1; 
            workoutPlan = await Http.GetFromJsonAsync<WorkoutPlanDto>($"api/workout/daily/{userId}");

            if (workoutPlan?.Sessions?.Count > 0)
            {
                var session = workoutPlan.Sessions[0];

                if (session.Exercises != null && session.Exercises.Count > 0)
                {
                    exercises = session.Exercises
                        .Select(e => (Icon: e.ImagePath, Name: e.Name, Details: e.Details))
                        .ToArray();

                    exerciseCompleted = new bool[exercises.Length];
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading exercises: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void StartWorkout()
    {
        isWorkoutStarted = true;
        StartTimer();
    }

    private async void EndWorkout()
    {
        isWorkoutStarted = false;
        ResetTimer();
        var parameters = new DialogParameters
        {
            { "ElapsedTime", $"{minutes:D2}:{seconds:D2}" }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Small };
        await DialogService.ShowAsync<WorkoutCompleteDialog>("Workout Complete!", parameters, options);
    }

    private void StartTimer()
    {
        if (timer == null)
        {
            timer = new System.Timers.Timer(1000); // 1 second
            timer.Elapsed += OnTimerElapsed;
        }
        isRunning = true;
        timer.Start();
    }

    private void PauseTimer()
    {
        isRunning = false;
        timer?.Stop();
    }

    private void ResetTimer()
    {
        PauseTimer();
        minutes = 0;
        seconds = 0;
        StateHasChanged();
    }

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (!isRunning) return;

        seconds++;
        if (seconds >= 60)
        {
            seconds = 0;
            minutes++;
        }

        InvokeAsync(StateHasChanged); // refresh UI
    }

    private void NavigateBackToDashboard()
    {
        NavigationManager.NavigateTo("/");
    }
}

<style scoped>
    
.info-box {
    background: linear-gradient(135deg, #a24bdc, #c994f8);
    padding: 1rem;
    border-radius: 20px;
    margin: 0 1rem;
    color: black;
}

.icon-box {
    background-color: white;
    border-radius: 16px;
    aspect-ratio: 1 / 1;         
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 6px;
    width: 48px;                  
}

.text-purple {
    color: #c994f8;
}
</style>
