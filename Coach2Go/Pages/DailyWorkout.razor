@page "/dailyworkout"
@using MudBlazor
@inject NavigationManager NavigationManager
@inject HttpClient Http

<!-- Top bar -->
<MudPaper Class="top-bar" Elevation="0" Style="width: 100%; padding-top: 1rem;">
    <MudGrid Class="px-4" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
        <MudItem xs="6">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                           Color="Color.Primary"
                           Style="background: linear-gradient(to right, #a24bdc, #c994f8); border-radius: 50%; width: 48px; height: 48px;"
                           OnClick="NavigateBackToDashboard" />
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                <MudIconButton Icon="@Icons.Material.Filled.Timer"
                               Color="Color.Primary"
                               Style="background: linear-gradient(to right, #a24bdc, #c994f8); border-radius: 50%; width: 48px; height: 48px;" />
                <MudIconButton Icon="@Icons.Material.Filled.Bookmark"
                               Color="Color.Primary"
                               Style="background: linear-gradient(to right, #a24bdc, #c994f8); border-radius: 50%; width: 48px; height: 48px;" />
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudText Typo="Typo.h4" Align="Align.Center" Class="mt-2 mb-2">Full-Body Workout</MudText>
<MudImage Src="images/workout1.jpg" Alt="Workout Image" Class="mb-3" Style="width: 100%; border-radius: 0;" />

<MudPaper Class="info-box" Elevation="0">
    <MudGrid>
        <MudItem xs="6"><b>Target Muscles:</b></MudItem><MudItem xs="6">Chest, Glutes, Core</MudItem>
        <MudItem xs="6"><b>Level:</b></MudItem><MudItem xs="6">Beginner</MudItem>
        <MudItem xs="6"><b>Equipment:</b></MudItem><MudItem xs="6">Bodyweight</MudItem>
        <MudItem xs="6"><b>Duration:</b></MudItem><MudItem xs="6">30 min</MudItem>
    </MudGrid>
</MudPaper>

@if (exercises.Length > 0)
{
    @for (int i = 0; i < exercises.Length; i++)
    {
        <MudGrid Class="mt-2 px-4" AlignItems="AlignItems.Center">
            <MudItem xs="2">
                <MudPaper Class="icon-box">
                    <MudImage Src="@exercises[i].Icon" Alt="@exercises[i].Name" Width="32" />
                </MudPaper>
            </MudItem>

            <MudItem xs="8">
                <MudText Typo="Typo.subtitle1" Class="text-white">@exercises[i].Name</MudText>
                <MudText Typo="Typo.caption" Class="text-white">@exercises[i].Details</MudText>
            </MudItem>

            @if (isWorkoutStarted)
            {
                <MudItem xs="2" Class="d-flex justify-end">
                    <MudCheckBox T="bool" @bind-Checked="exerciseCompleted[i]" Color="Color.Primary" />
                </MudItem>
            }
        </MudGrid>
    }
}

<!-- Floating Start/End Button -->
<div style="position: fixed; bottom: 80px; left: 50%; transform: translateX(-50%); z-index: 999;">
    @if (!isWorkoutStarted)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="rounded-full px-6 py-2" OnClick="@(() => isWorkoutStarted = true)">
            Start Workout
        </MudButton>
    }
    else
    {
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" Class="rounded-full px-6 py-2" OnClick="@(() => isWorkoutStarted = false)">
            End Workout
        </MudButton>
    }
</div>

@code {
    private WorkoutPlan? workoutPlan;
    private (string Icon, string Name, string Details)[] exercises = Array.Empty<(string, string, string)>();
    private bool[] exerciseCompleted = Array.Empty<bool>();
    private bool isWorkoutStarted = false;

    protected override async Task OnInitializedAsync()
    {
        workoutPlan = await Http.GetFromJsonAsync<WorkoutPlan>("api/workout/daily");

        if (workoutPlan?.Sessions != null && workoutPlan.Sessions.Count > 0)
        {
            exercises = workoutPlan.Sessions[0].Exercises
                .Select(e => (e.ImagePath, e.Name, e.Details)).ToArray();

            exerciseCompleted = new bool[exercises.Length];
        }
    }

    private void NavigateBackToDashboard()
    {
        NavigationManager.NavigateTo("/");
    }

    // your data models
    public class WorkoutPlan
    {
        public int Id { get; set; }
        public string Goal { get; set; } = "";
        public string Type { get; set; } = "";
        public string Experience { get; set; } = "";
        public int Duration { get; set; }
        public string Intensity { get; set; } = "";
        public List<WorkoutSession> Sessions { get; set; } = new();
    }

    public class WorkoutSession
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public List<Exercise> Exercises { get; set; } = new();
    }

    public class Exercise
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Details { get; set; } = "";
        public string ImagePath { get; set; } = "";
    }
}

<style scoped>
.info-box {
    background: linear-gradient(135deg, #a24bdc, #c994f8);
    padding: 1rem;
    border-radius: 20px;
    margin: 0 1rem;
    color: black;
}

.icon-box {
    background-color: white;
    border-radius: 16px;
    aspect-ratio: 1 / 1;         
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 6px;
    width: 48px;                  
}

.text-purple {
    color: #c994f8;
}
</style>